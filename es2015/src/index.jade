doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title ECMAScript (in) 2015

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 ECMAScript <span style="font-size: 50%">(in)</span> 2015
        h2 The future is now!
        footer A presentation by <a href="http://www.twitter.com/Hugo_Agbonon">@Hugo_Agbonon</a>
        p <img src="images/Hugo_Agbonon.jpeg" style="border-radius: 50%; width: 3em;">

      section
        div Let's talk about...
        ul
          li What <b>ECMAScript 2015</b> is
          li Using it right now
          li Way too much of technical stuff

      section
        h2 ECMAScript 2015
        p was called <b>ES6</b>
        p was called <b>ES.next</b>
        p was refered as <b>Harmony</b>
        p.big.fragment is the spec for <b>JavaScript</b>'s next version (btw)

      section
        h3 The new name has a purpose
        p It shows that the spec will now be released on an <b>annual</b> cadence
        p The next version, previously ES7, will be called ES2016, etc
        
      section
        p So the new name conveys better the intentions
        p.small <a href="http://webreflection.blogspot.fr/2015/01/javascript-and-living-ecmascript.html">Even if most people liked ES 6, and lots of resources call it that</a>
        p.smaller And even if it feels like a Windows version name
      
      section
        p It also feels like a signal:
        p.big
          b It's time to upgrade
        p.small Or do you want to be writing "legacy code"?
          
      section
        h3 The future is now!
        p Final release in June!
        p.smaller (And it is 99% done, feature frozen, in release candidate)
        img(src="images/happening.gif")
      
      section
        h2 By the way, where are we on ES2015 support?
        
      section
        p Estimate of % of features implemented:
        ul
          li IE11: <b>15%</b> (Edge: <b>69%</b>)
          li Firefox: <b>64%</b> (Aurora: <b>68%</b>)
          li Chrome 42: <b>45%</b>
          li Node.js: <b>23%</b> (IO.js: <b>43%</b>)
          li <a href="http://kangax.github.io/compat-table/es6/">etc</a>
          
      section
        p Of course, the supported parts do not necessarily overlap
        table
          tr
            th Feature
            th Firefox
            th Chrome
          tr
            td Destructuring
            td ✔
            td ✖
          trs
            td Object.observe (ES2016)
            td ✖
            td ✔
        
      section
        h3 Introducing <a href="http://en.wikipedia.org/wiki/Source-to-source_compiler">transpilers</a>
        
      section
        ul
          li <b><a href="https://babeljs.io/">Babel</a></b>
          li <b><a href="https://github.com/google/traceur-compiler">Traceur</a></b>
        p Can compile ES2015 code to ES5
        p Don't support everything, but most features
        p "Just another build step"
        
      section
        h3 Babel's website is awesome.
        p Use it and start working 30s later
        p <a href="http://babeljs.io/users/">(And yes, lots of companies use it in production)</a>

      section
        h2 Now to ES2015's content
        p I've been babbling for a while about the "how", not the "why"
        
      section
        ol
          li new Syntax
          li new Functionalities
          
      section
        h3 Block scoping: let
        pre
          code.language-javascript.
            for (var i = 0; i < 5; i++) {
              var tmp = Math.pow(i, i);
            }
            console.log(i, tmp); // 5, 256
      
      section
        h3 Block scoping: let
        pre
          code.language-javascript.
            for (let i = 0; i < 5; i++) {
              let tmp = Math.pow(i, i);
            }
            console.log(i, tmp); // ReferenceError: i, tmp are not defined
      
      section
        h3 Block scoping: const
        pre
          code.language-javascript.
            const AWESOME_MEETUP = 'ParisJS';
            AWESOME_MEETUP = 'Another place'; // TypeError

        pre
          code.language-javascript.
            if (true) {
              const AWESOME_MEETUP = 'ParisJS';
            }
            console.log(AWESOME_MEETUP); // ReferenceError

      section
        h3 Methods
        pre
          code.language-javascript.
            var obj = {
              sayHello: function(name) {
                console.log(name);
              }
            }
            
        pre
          code.language-javascript.
            var obj = {
              sayHello(name) {
                console.log(name);
              }
            }
      section
        h3 Arrow functions
        
        pre
          code.language-javascript.
            // ES5
            ['Vivement', 'Les', 'Pizzas'].map(function(s) {
              return s.toUpperCase();
            });
            
        pre
          code.language-javascript.
            // ES2015
            ['Vivement', 'Les', 'Pizzas'].map(s => s.toUpperCase());
            
      section
        h3 Arrow functions
        p Look at <b>this</b>!
        p <i>Suppose we're in an object with this.logger defined</i>
        pre
          code.language-javascript.
            var self = this; // ES3: Saving this
            article.save(function(err) {
              if (err) this.logger.error(err);
            }.bind(this)); // ES5: bind
            
        pre
          code.language-javascript.
            // ES2015: Lexical this
            article.save((err) => {
              if (err) this.logger.error(err);
            });
      
      section
        h3 Spread Operator
        pre
          code.language-javascript.
            Math.max([1,2,3,4]); // NaN
            Math.max(...[1,2,3,4]); // 4
      
      section
        h3 Rest parameters
        p Get arguments, get rid of "<code>arguments</code>"
        pre
          code.language-javascript.
            function randomCallback(err, ...params) {
              console.log(params); // [1, 2, 3, 4, 5]
            }
            randomCallback(null, 1, 2, 3, 4, 5)
      
      section
        h3 Default parameters
        pre
          code.language-javascript.
            function sayHello(name = 'ParisJS') {
              console.log('Hello ' + name);
            }
            sayHello(); // Hello ParisJS
            sayHello('Pizzas'); // Hello Pizzas

      section
        h3 Short-hands to build objects...
        pre
          code.language-javascript.
            var text = 'Hello ParisJS';
            var images = [];
            var object = {};

        pre
          code.language-javascript.
            // ES5
            var resources = { text: text, images: images, object : object };
        pre
          code.language-javascript.
            // ES6
            let resources = { text, images, object };

      section
        h3 and destructuring
        pre
          code.language-javascript.
            let { max, min } = Math;
            max(1,2,3,4);
            min(1,2,3,4);
      
      section
        h3 Template strings
        pre
          code.language-javascript.
            var name = 'ParisJS';
            var text = `I'm speaking at ${name}
            Oh god the text
            is going on multiple lines
            It's incredible!`
        img(src="images/HELL_YEAH.jpeg" width=180)
              
      section
        h3 Modules - named exports & imports
        pre
          code.language-javascript.
            // meetup.js
            export const BEST_MEETUP = 'ParisJS';
            export function speak(s) { console.log(s)};
        pre
          code.language-javascript.
            // main.js
            import { BEST_MEETUP, speak } from './meetup.js';
            speak(BEST_MEETUP); // 'ParisJS';

      section
        h3 Modules - default exports & imports
        pre
          code.language-javascript.
            // meetup.js
            export const BEST_MEETUP = 'ParisJS';
            export default function speak(s) { console.log(s); };
        pre
          code.language-javascript.
            // main.js
            import * as meetup from './meetup.js';
            meetup.speak(meetup.BEST_MEETUP); // 'ParisJS';
        pre
          code.language-javascript.
            // main2.js
            import speak from './meetup.js';
            speak('Hello'); // 'Hello';

      section
        h3 Classes
        p <a href="https://medium.com/javascript-scene/common-misconceptions-about-inheritance-in-javascript-d5d9bab29b0a">A feature everyone wanted! (not)</a>
          pre
            code.language-javascript.
              class Plane extends Vehicle {
                 constructor(name, capacity) {
                  super(name); 
                  this.capacity = capacity;
                 }
                 announce() {
                   console.log(super.announce());
                   console.log('I can carry ' + this.capacity + ' people');
                 }
                 static explainTheUse () {
                   console.log('I CAN FLY! YOU CAN FLY! WE CAN FLY!')
                 }
               }
               
       section
         h3 for...of
         p Our new loop overlord. Iterates on arrays and anything that implements iterators
         pre
           code.language-javascript.
            for (let value of [1,2,3]) {
              console.log(value); // 1, 2, 3
            }
            for (let [index, value] of ['a', 'b', 'c'].entries()) {
              console.log(index, value); // 0 a, 1 b, 2c
            }
             
      section
        h3 Sets
        p Basically arrays with a unicity enforcement
        p Iterate with <code>for...of</code>!
          pre
            code.language-javascript.
              var a = new Set([1,2,3,4,3,2,1,0,1])
              console.log(a); // Set [ 1, 2, 3, 4, 0 ]
              for (let i of a) {
                console.log(i); // 1 2 3 4 0
              }
            
      section
        h3 Maps
        p Adios, <code>if (object.hasOwnProperty)</code>
        p Can take any kind of value (string, object, number...) as key
        p Easy to get its length
        p Iterate with <code>for...of</code>!
          pre
            code.language-javascript.
              var meetups = new Map();

              meetups.set('ParisJS', { location: 'SenseSpace', edition: 47 });
              meetups.set(NaN, { location: 'SecretSpace' });

              for (let [name, infos] of meetups.entries()) {
                console.log(`Meetup: ${name}, location: ${infos.location}`)
              }
              meetups.get('ParisJS');
              meetups.get(NaN);
      
      section
        h3 Generators
        pre
          code.language-javascript.
            function* simpleGenerator(){
              yield "first";
              yield "second";
              for (var i = 0; i < 2; i++) {
                yield i;
              }
            }

            var g = simpleGenerator();
            console.log(g.next()); // { value: "first", done: false }
            console.log(g.next()); // { value: "second", done: false }
            console.log(g.next()); // { value: 0, done: false }
            console.log(g.next()); // { value: 1, done: false }
            console.log(g.next()); // { value: undefined, done: true }
      
      section
        h3 Promises
        pre
          code.language-javascript.
            function foobar() {
              return new Promise(function(resolve, reject) {
                return Math.random() > 0.5 ?
                  resolve(':)') : reject(new Error(':('));
              });
            }
            
            foobar()
            .then((foo) => console.log('Success! ' + foo))
            .catch((bar) => console.log('Failure! ' + bar));
            // No .finally for now :(

      section
        h3 new utility functions
        p.small People are getting sick of <code>indexOf</code>
        pre
          code.language-javascript
            'ParisJS'.includes('JS');
        pre
          code.language-javascript
            ['ParisJS', 'Pizzas', 'Soon'].find(el => el === 'Soon');
        pre
          code.language-javascript
            ['ParisJS', 'Pizzas', 'Soon'].findIndex(el => el === 'Soon');

      section
        h3 new utility functions
        pre
          code.language-javascript.
            Object.assign({}, { name: 'ParisJS' }, { edition: 47 } );

        pre
          code.language-javascript.
            Array.from(document.querySelectorAll('*'));

        p ...

      section
        h2 And more...
        ul
          li Better Unicode support
          li Symbols (new primitive type to get unique values)
          li Proxies
          li <a href="https://github.com/lukehoban/es6features">And more</a>

      section
        h2 ES2016 (ES7)
        ul
          li async functions
          li Object.observe
          li Typed objects
          li <a href="https://github.com/hemanth/es7-features">Waaaaay more</a>

      section
        h3 async functions
        p The Holy Grail: better than promises
        pre
          code.language-javascript.
            async function doAsyncOp () {
              val = await asynchronousOperation();
              val = await asynchronousOperation(val);
              val = await asynchronousOperation(val);
              return await asynchronousOperation(val);
            }

      section
        h2 ES2017 (ES8)
        ul
          li Macros?
      
      section
        h2 So
        
      section
        h2 ECMAScript 2015 has <b>WAY TOO MUCH</b> new stuff
        p All the more reason to start using things right now if you don't already
        p.small Either you wait <b>a lot</b>, or you'll end up using a transpiler anyway.
        
      section
        p Plus, if you don't, I'll come back with this same presentation renamed
        p.big "<b>Why aren't you yet using ECMAScript 2015?</b>"
        p And I'll keep talking <i>while the pizzas get cold</i>.

      section
        h3 Resources
        ul
          li <a href="http://www.2ality.com">2ality.com</a>
          li <a href="https://kangax.github.io/compat-table/es6/">ES6 compatibility table</a>
          li <a href="https://github.com/lukehoban/es6features">es6features</a>
          li <a href="https://github.com/hemanth/es7-features">es7features</a>
          li <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla">Mozilla Developer Network</a>
          li <a href="https://babeljs.io/">Babel</a>
          li &amp; The Internet
        
      section
        h3 Thank you
        p Any questions?
        p This: <a href="http://hugo-agbonon.github.io/presentations/es2015/">http://hugo-agbonon.github.io/presentations/es2015</a>

    script(src='build/build.js')
